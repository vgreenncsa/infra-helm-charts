{{- if .Values.imageCredentials.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "ketch.transponder.fullname" . }}-regcred
  namespace: {{ .Release.Namespace }}
  labels: {{ include "ketch.transponder.labels" . | nindent 4 }}
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: {{ include "ketch.transponder.imagePullSecret" . }}
{{- end }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "ketch.transponder.fullname" . }}-confvars
  namespace: {{ .Release.Namespace }}
  labels: {{ include "ketch.transponder.labels" . | nindent 4 }}
type: Opaque
data:
  {{- if and .Values.config.aws.keyId .Values.config.aws.secretsManager.enabled }}
  aws_access_key_id: {{ .Values.config.aws.keyId | b64enc }}
  aws_secret_access_key: {{ required "A valid .Values.config.aws.secretKey entry required!" .Values.config.aws.secretKey | b64enc }}
  {{- end }}
  {{- if or .Values.config.vault.enabled (eq .Values.secret.provider "vault") }}
  {{- if (not (.Values.config.vault.secret).name) }}
  {{ (.Values.config.vault.secret).key | default "vault_token" }}: {{ required "A valid .Values.config.vault.token entry required!" .Values.config.vault.token | b64enc }}
  {{- end }}
  {{- if and ((.Values.config.vault.tls).cert).content ((.Values.config.vault.tls).key).content }}
  vault_tls.cert: {{ .Values.config.vault.tls.cert.content }}
  vault_tls.key: {{ .Values.config.vault.tls.key.content }}
  {{- if ((.Values.config.vault.tls).rootca).content }}
  vault_ca.crt: {{ ((.Values.config.vault.tls).rootca).content }}
  {{- end }}
  {{- end }}
  {{- end }}
  {{- if eq .Values.secret.provider "azureKeyVault" }}
  azure_client_secret: {{ required "A valid .Values.config.azure.client.secret entry required!" .Values.config.azure.client.secret | b64enc }}
  {{- end }}
  tls.cert: {{ .Values.config.tls.cert.content }}
  tls.key: {{ .Values.config.tls.key.content }}
  {{- if .Values.config.tls.rootca.content }}
  ca.crt: {{ .Values.config.tls.rootca.content }}
  {{- end }}
